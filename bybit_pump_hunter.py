#!/usr/bin/env python3
"""
Bybit Pump Hunter Bot
Thu·∫≠t to√°n t·ª± ƒë·ªông sƒÉn coin tƒÉng gi√° tr√™n s√†n Bybit
"""

import ccxt
import pandas as pd
import numpy as np
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import talib
import requests
from dataclasses import dataclass

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bybit_pump_hunter.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class TradingConfig:
    """C·∫•u h√¨nh trading"""
    api_key: str
    api_secret: str
    testnet: bool = True
    risk_percentage: float = 2.0  # % r·ªßi ro m·ªói l·ªánh
    max_positions: int = 5
    pump_threshold: float = 5.0  # % tƒÉng gi√° ƒë·ªÉ ph√°t hi·ªán pump
    volume_threshold: float = 200.0  # % tƒÉng volume
    min_volume_24h: float = 1000000  # Volume t·ªëi thi·ªÉu 24h (USDT)
    stop_loss_percentage: float = 3.0  # % stop loss
    take_profit_percentage: float = 10.0  # % take profit
    leverage: int = 3
    telegram_token: Optional[str] = None
    telegram_chat_id: Optional[str] = None

class BybitPumpHunter:
    """Bot sƒÉn coin pump tr√™n Bybit"""
    
    def __init__(self, config: TradingConfig):
        self.config = config
        self.exchange = self._init_exchange()
        self.active_positions = {}
        self.watchlist = []
        self.last_signals = {}
        
    def _init_exchange(self) -> ccxt.Exchange:
        """Kh·ªüi t·∫°o k·∫øt n·ªëi Bybit"""
        try:
            exchange = ccxt.bybit({
                'apiKey': self.config.api_key,
                'secret': self.config.api_secret,
                'sandbox': self.config.testnet,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'future',  # S·ª≠ d·ª•ng futures
                }
            })
            
            # Test k·∫øt n·ªëi
            balance = exchange.fetch_balance()
            logger.info(f"K·∫øt n·ªëi Bybit th√†nh c√¥ng! Balance: {balance['USDT']['free']:.2f} USDT")
            return exchange
            
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi Bybit: {e}")
            raise
    
    def get_top_gainers(self, limit: int = 50) -> List[Dict]:
        """L·∫•y danh s√°ch coin tƒÉng gi√° m·∫°nh nh·∫•t"""
        try:
            tickers = self.exchange.fetch_tickers()
            gainers = []
            
            for symbol, ticker in tickers.items():
                if symbol.endswith('/USDT') and ticker['percentage'] is not None:
                    if (ticker['percentage'] > self.config.pump_threshold and 
                        ticker['quoteVolume'] and 
                        ticker['quoteVolume'] > self.config.min_volume_24h):
                        
                        gainers.append({
                            'symbol': symbol,
                            'price': ticker['last'],
                            'change_24h': ticker['percentage'],
                            'volume_24h': ticker['quoteVolume'],
                            'high_24h': ticker['high'],
                            'low_24h': ticker['low']
                        })
            
            # S·∫Øp x·∫øp theo % tƒÉng gi√°
            gainers.sort(key=lambda x: x['change_24h'], reverse=True)
            return gainers[:limit]
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y top gainers: {e}")
            return []
    
    def analyze_pump_signal(self, symbol: str) -> Dict:
        """Ph√¢n t√≠ch t√≠n hi·ªáu pump cho m·ªôt coin"""
        try:
            # L·∫•y d·ªØ li·ªáu OHLCV
            ohlcv = self.exchange.fetch_ohlcv(symbol, '1m', limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # T√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
            df['sma_5'] = talib.SMA(df['close'], timeperiod=5)
            df['sma_20'] = talib.SMA(df['close'], timeperiod=20)
            df['rsi'] = talib.RSI(df['close'], timeperiod=14)
            df['macd'], df['macd_signal'], df['macd_hist'] = talib.MACD(df['close'])
            df['bb_upper'], df['bb_middle'], df['bb_lower'] = talib.BBANDS(df['close'])
            
            # T√≠nh volume moving average
            df['volume_sma'] = talib.SMA(df['volume'], timeperiod=20)
            
            # L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
            latest = df.iloc[-1]
            prev = df.iloc[-2]
            
            # T√≠nh % thay ƒë·ªïi volume
            volume_change = ((latest['volume'] - prev['volume']) / prev['volume']) * 100
            
            # T√≠nh % thay ƒë·ªïi gi√°
            price_change = ((latest['close'] - prev['close']) / prev['close']) * 100
            
            # ƒêi·ªÅu ki·ªán pump
            pump_conditions = {
                'volume_spike': volume_change > self.config.volume_threshold,
                'price_spike': price_change > 2.0,
                'rsi_oversold': latest['rsi'] < 30,
                'macd_bullish': latest['macd'] > latest['macd_signal'],
                'price_above_sma5': latest['close'] > latest['sma_5'],
                'volume_above_avg': latest['volume'] > latest['volume_sma'] * 2
            }
            
            # T√≠nh ƒëi·ªÉm pump
            pump_score = sum(pump_conditions.values())
            
            return {
                'symbol': symbol,
                'pump_score': pump_score,
                'price_change': price_change,
                'volume_change': volume_change,
                'rsi': latest['rsi'],
                'conditions': pump_conditions,
                'timestamp': latest['timestamp']
            }
            
        except Exception as e:
            logger.error(f"L·ªói ph√¢n t√≠ch {symbol}: {e}")
            return {}
    
    def calculate_position_size(self, symbol: str, entry_price: float) -> float:
        """T√≠nh to√°n k√≠ch th∆∞·ªõc position"""
        try:
            balance = self.exchange.fetch_balance()
            available_balance = balance['USDT']['free']
            
            # T√≠nh position size d·ª±a tr√™n risk percentage
            risk_amount = available_balance * (self.config.risk_percentage / 100)
            stop_loss_distance = entry_price * (self.config.stop_loss_percentage / 100)
            
            # Position size = risk_amount / stop_loss_distance
            position_size = risk_amount / stop_loss_distance
            
            # √Åp d·ª•ng leverage
            position_size *= self.config.leverage
            
            # Gi·ªõi h·∫°n t·ªëi ƒëa 10% balance
            max_position = available_balance * 0.1 / entry_price
            position_size = min(position_size, max_position)
            
            return round(position_size, 3)
            
        except Exception as e:
            logger.error(f"L·ªói t√≠nh position size: {e}")
            return 0
    
    def open_long_position(self, symbol: str, analysis: Dict) -> bool:
        """M·ªü position long"""
        try:
            if len(self.active_positions) >= self.config.max_positions:
                logger.warning(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n {self.config.max_positions} positions")
                return False
            
            # L·∫•y gi√° hi·ªán t·∫°i
            ticker = self.exchange.fetch_ticker(symbol)
            entry_price = ticker['last']
            
            # T√≠nh position size
            position_size = self.calculate_position_size(symbol, entry_price)
            if position_size <= 0:
                logger.warning(f"Position size qu√° nh·ªè cho {symbol}")
                return False
            
            # T√≠nh stop loss v√† take profit
            stop_loss = entry_price * (1 - self.config.stop_loss_percentage / 100)
            take_profit = entry_price * (1 + self.config.take_profit_percentage / 100)
            
            # ƒê·∫∑t l·ªánh market buy
            order = self.exchange.create_market_buy_order(symbol, position_size)
            
            # L∆∞u th√¥ng tin position
            position_info = {
                'symbol': symbol,
                'side': 'long',
                'entry_price': entry_price,
                'size': position_size,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'entry_time': datetime.now(),
                'analysis': analysis
            }
            
            self.active_positions[symbol] = position_info
            
            # G·ª≠i th√¥ng b√°o
            message = f"""
üöÄ M·ªû POSITION LONG
Symbol: {symbol}
Entry Price: ${entry_price:.4f}
Size: {position_size}
Stop Loss: ${stop_loss:.4f}
Take Profit: ${take_profit:.4f}
Pump Score: {analysis.get('pump_score', 0)}/6
Volume Change: {analysis.get('volume_change', 0):.1f}%
            """
            self.send_telegram_message(message)
            
            logger.info(f"M·ªü position long {symbol} th√†nh c√¥ng")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói m·ªü position {symbol}: {e}")
            return False
    
    def close_position(self, symbol: str, reason: str = "Manual") -> bool:
        """ƒê√≥ng position"""
        try:
            if symbol not in self.active_positions:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y position {symbol}")
                return False
            
            position = self.active_positions[symbol]
            
            # ƒê·∫∑t l·ªánh market sell
            order = self.exchange.create_market_sell_order(symbol, position['size'])
            
            # T√≠nh P&L
            current_price = self.exchange.fetch_ticker(symbol)['last']
            pnl = (current_price - position['entry_price']) * position['size']
            pnl_percentage = (current_price - position['entry_price']) / position['entry_price'] * 100
            
            # G·ª≠i th√¥ng b√°o
            message = f"""
üìä ƒê√ìNG POSITION
Symbol: {symbol}
Entry Price: ${position['entry_price']:.4f}
Exit Price: ${current_price:.4f}
P&L: ${pnl:.2f} ({pnl_percentage:.2f}%)
Reason: {reason}
            """
            self.send_telegram_message(message)
            
            # X√≥a kh·ªèi active positions
            del self.active_positions[symbol]
            
            logger.info(f"ƒê√≥ng position {symbol} th√†nh c√¥ng. P&L: {pnl:.2f}")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói ƒë√≥ng position {symbol}: {e}")
            return False
    
    def check_stop_loss_take_profit(self):
        """Ki·ªÉm tra stop loss v√† take profit"""
        try:
            for symbol, position in list(self.active_positions.items()):
                current_price = self.exchange.fetch_ticker(symbol)['last']
                
                # Ki·ªÉm tra stop loss
                if current_price <= position['stop_loss']:
                    self.close_position(symbol, "Stop Loss")
                
                # Ki·ªÉm tra take profit
                elif current_price >= position['take_profit']:
                    self.close_position(symbol, "Take Profit")
                    
        except Exception as e:
            logger.error(f"L·ªói ki·ªÉm tra SL/TP: {e}")
    
    def send_telegram_message(self, message: str):
        """G·ª≠i th√¥ng b√°o Telegram"""
        if not self.config.telegram_token or not self.config.telegram_chat_id:
            return
        
        try:
            url = f"https://api.telegram.org/bot{self.config.telegram_token}/sendMessage"
            data = {
                'chat_id': self.config.telegram_chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            requests.post(url, data=data, timeout=10)
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i Telegram: {e}")
    
    def run_pump_hunter(self):
        """Ch·∫°y bot sƒÉn pump"""
        logger.info("üöÄ B·∫Øt ƒë·∫ßu Bybit Pump Hunter Bot")
        
        while True:
            try:
                # L·∫•y top gainers
                gainers = self.get_top_gainers(20)
                logger.info(f"T√¨m th·∫•y {len(gainers)} coin tƒÉng gi√°")
                
                # Ph√¢n t√≠ch t·ª´ng coin
                for gainer in gainers[:10]:  # Ch·ªâ ph√¢n t√≠ch top 10
                    symbol = gainer['symbol']
                    
                    # B·ªè qua n·∫øu ƒë√£ c√≥ position
                    if symbol in self.active_positions:
                        continue
                    
                    # Ph√¢n t√≠ch t√≠n hi·ªáu pump
                    analysis = self.analyze_pump_signal(symbol)
                    
                    if analysis and analysis.get('pump_score', 0) >= 4:
                        logger.info(f"T√≠n hi·ªáu pump m·∫°nh cho {symbol}: {analysis['pump_score']}/6")
                        
                        # M·ªü position long
                        self.open_long_position(symbol, analysis)
                        
                        # Ngh·ªâ 5 gi√¢y gi·ªØa c√°c l·ªánh
                        time.sleep(5)
                
                # Ki·ªÉm tra stop loss v√† take profit
                self.check_stop_loss_take_profit()
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i
                logger.info(f"Active positions: {len(self.active_positions)}")
                for symbol, pos in self.active_positions.items():
                    current_price = self.exchange.fetch_ticker(symbol)['last']
                    pnl = (current_price - pos['entry_price']) / pos['entry_price'] * 100
                    logger.info(f"{symbol}: {pnl:.2f}%")
                
                # Ngh·ªâ 30 gi√¢y tr∆∞·ªõc khi qu√©t l·∫°i
                time.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("D·ª´ng bot...")
                break
            except Exception as e:
                logger.error(f"L·ªói trong main loop: {e}")
                time.sleep(60)  # Ngh·ªâ 1 ph√∫t n·∫øu c√≥ l·ªói

def main():
    """H√†m main"""
    # C·∫•u h√¨nh bot
    config = TradingConfig(
        api_key="YOUR_BYBIT_API_KEY",
        api_secret="YOUR_BYBIT_API_SECRET",
        testnet=True,  # ƒê·∫∑t False cho live trading
        risk_percentage=2.0,
        max_positions=3,
        pump_threshold=5.0,
        volume_threshold=200.0,
        stop_loss_percentage=3.0,
        take_profit_percentage=10.0,
        leverage=3,
        telegram_token="YOUR_TELEGRAM_BOT_TOKEN",
        telegram_chat_id="YOUR_TELEGRAM_CHAT_ID"
    )
    
    # Kh·ªüi t·∫°o v√† ch·∫°y bot
    bot = BybitPumpHunter(config)
    bot.run_pump_hunter()

if __name__ == "__main__":
    main()